model_list:
  - model_name: embeddings
    litellm_params:
      model: text-embedding-3-small
      api_key: "os.environ/OPENAI_API_KEY"
  - model_name: local-embeddings
    litellm_params:
      model: openai/custom-embedding
      api_base: "os.environ/EMBEDDINGS_ENDPOINT"
      api_key: "os.environ/GTE_API_KEY"
  - model_name: default
    litellm_params:
      model: gpt-4-0125-preview
      api_key: "os.environ/OPENAI_API_KEY"
  - model_name: generate-response
    litellm_params:
      model: gpt-4-0125-preview
      api_key: "os.environ/OPENAI_API_KEY"
  - model_name: detect-language
    litellm_params:
      model: gpt-4-0125-preview
      api_key: "os.environ/OPENAI_API_KEY"
  - model_name: on-off-topic
    litellm_params:
      model: gpt-3.5-turbo-1106
      api_key: "os.environ/OPENAI_API_KEY"
  - model_name: translate
    litellm_params:
      model: gpt-3.5-turbo-1106
      api_key: "os.environ/OPENAI_API_KEY"
  - model_name: paraphrase
    litellm_params:
      model: gpt-3.5-turbo-1106
      api_key: "os.environ/OPENAI_API_KEY"
  - model_name: safety
    litellm_params:
      model: gpt-3.5-turbo-1106
      api_key: "os.environ/OPENAI_API_KEY"
  - model_name: alignscore
    litellm_params:
      model: gpt-4-0125-preview
      api_key: "os.environ/OPENAI_API_KEY"
  - model_name: urgency-detection
    litellm_params:
      model: gpt-3.5-turbo-1106
      api_key: "os.environ/OPENAI_API_KEY"
litellm_settings:
  num_retries: 2 # retry call 3 times on each model_name (e.g. translate).
  request_timeout: 100 # raise Timeout error if call takes longer than 10s. Sets litellm.request_timeout
  # fallbacks: [{"paraphrase": ["default"]}] # fallback to default model if paraphrase model fails num_retries
  telemetry: False
  # success_callback: ["langfuse"]  # Optional, if you want to monitor with Langfuse
