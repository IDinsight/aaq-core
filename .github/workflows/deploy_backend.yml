name: Deploying Backend

on:
  push:
    branches:
      - AAQ-278-Create-Backend-Pipeline
    paths:
        - "core_backend/**"
        - ".github/workflows/**"

jobs:
    DeployFrontend:
        name: Deploying Backend demo
        runs-on: ubuntu-latest
        environment:
            name: demo
    
        permissions:
          id-token: write
          contents: read
        
        steps:
            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v3
            - uses: actions/checkout@v4

            
            - name: Load .env file
              uses: xom9ikk/dotenv@v2
              with:
                path: ./.github/workflows
                mode: demo

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{env.ROLE}}"
                role-session-name: deployrolesession
                aws-region: ${{ env.AWS_REGION }}
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
              


            - name: Build and push
              id: build-image
              uses: docker/build-push-action@v5
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: ${{env.REPO}}
                IMAGE_TAG: backend
              with:
                context: core_backend
                platforms: linux/arm64
                file: core_backend/Dockerfile.demo
                cache-from: type=gha
                cache-to: type=gha
                push: true
                tags: ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}
                build-args: |
                  BOOTSTRAP_FILE=${{env.BOOTSTRAP_FILE}}
          # This makes sure that the Docker Compose file is cached between builds and only changes to the file will trigger creation of task definition
          # This will reduce the number of task definitions created and will speed up the deployment process
          # A drawback of this approach is that if you change the variables used in the Docker Compose, the task definition will not be updated
            - name: Calculate Docker Compose hash
              id: hash
              run: echo "compose_hash=$(sha256sum core_backend/deployment/docker-compose.yml | awk '{print $1}')" >> $GITHUB_OUTPUT
        
            - name: Cache Docker Compose hash
              uses: actions/cache@v3
              with:
                path: |
                  ./.compose_hash
                key: ${{ steps.hash.outputs.compose_hash }}
                
            - name: Check for changes in Docker Compose
              id: check_changes
              run: |
                if [ -f ./.compose_hash ] && [ "$(< ./.compose_hash)" == "${{ steps.hash.outputs.compose_hash }}" ]; then
                  echo "changed=false" >> $GITHUB_OUTPUT
                else
                  echo "${{ steps.hash.outputs.compose_hash }}" > ./.compose_hash
                  echo "changed=true" >> $GITHUB_OUTPUT
                fi
            - name: Install the ECS CLI
              if: steps.check_changes.outputs.changed == 'true'
              run: |
                sudo curl -Lo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
                sudo chmod +x /usr/local/bin/ecs-cli
            
            - name: Create Task Definition
              if: steps.check_changes.outputs.changed == 'true'
              id: create-task-def
              run: |
                ecs-cli configure --cluster ${{ env.CLUSTER_NAME }} \
                --region ${{ env.AWS_REGION }} \
                --default-launch-type EC2 \
                --config-name aaq-demo-backend-config
                ecs-cli compose --project-name backend-task --file core_backend/deployment/docker-compose.yml --task-role-arn ${{env.TASK_ROLE_ARN}} create
                echo "taskdef=backend-task" >> $GITHUB_OUTPUT
              env:
                AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
                AWS_REGION: ${{ env.AWS_REGION }}
                QDRANT_HOST: ${{ env.QDRANT_HOST }}
                NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
                DOMAIN: ${{ env.DOMAIN }}
                REPO: ${{ env.REPO }}
            # We need this since deploy task definition action needs the task definition in json format
            
            - name: Task definition download
              id: download-task-def
              env:
                ecs_task_def_name: backend-task
              run: |
                aws ecs describe-task-definition --task-definition "$ecs_task_def_name" --query taskDefinition > task-definition.json
                echo $(cat task-definition.json | jq 'del(
                  .taskDefinitionArn,
                  .requiresAttributes,
                  .compatibilities,
                  .revision,
                  .status,
                  .registeredAt,
                  .registeredBy
                )') > task-definition.json
                echo "task-def=task-definition.json" >> $GITHUB_OUTPUT
            
            - name: Deploy Amazon ECS task definition
              id: ecs-deploy
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                task-definition: ${{ steps.download-task-def.outputs.task-def }}
                service: backend-service
                cluster: ${{ env.CLUSTER_NAME }} 
                wait-for-service-stability: true
            - name: Check if deployment was successful
              id: check-deployment
              run: |
                  RUNNING_TASKS=$(aws ecs describe-services --cluster ${{ env.CLUSTER_NAME }} --services backend-service --query services[0].deployments[0].runningCount | jq -r ".")
                  
                  if [ "$RUNNING_TASKS" -eq "0" ]; then
                    echo "Deployment failed."
                    exit 1
                  fi
                  
                