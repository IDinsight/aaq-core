name: Deploy core_backend to GCP

on:
  push:
    branches:
      - main
      - testing
    paths:
      - "core_backend/**"
      - "deployment/gcp/cloudbuild_core_backend.yaml"
      - ".github/workflows/deploy_gcp_core_backend.yaml"
  workflow_dispatch:

jobs:
  DeployCoreBackendToGCP:
    runs-on: ubuntu-latest

    permissions:
      contents: "read"
      id-token: "write"

    environment: gcp-testing
    # TODO: update Github env and change to github.ref_name

    env:
      RESOURCE_PREFIX: ${{ secrets.PROJECT_NAME }}-${{ (github.ref_name == 'main' && 'testing') || github.ref_name }}

    steps:
      - uses: "actions/checkout@v4"

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.POOL_ID }}/providers/${{ vars.PROVIDER_ID }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ secrets.DOCKER_REGISTRY_DOMAIN}}

      - name: Build and push core_backend image
        working-directory: core_backend
        run: |
          gcloud builds submit \
              --config=../deployment/gcp/cloudbuild_core_backend.yaml \
              --substitutions \
              _RESOURCE_PREFIX=${{ env.RESOURCE_PREFIX }},_DOCKER_REGISTRY_DOMAIN=${{ secrets.DOCKER_REGISTRY_DOMAIN }}

      - name: Deploy core_backend container
        id: "compute-ssh"
        uses: "google-github-actions/ssh-compute@v1"
        env:
          REPO: ${{ secrets.DOCKER_REGISTRY_DOMAIN }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.RESOURCE_PREFIX }}
        with:
          instance_name: "${{ secrets.DEPLOYMENT_INSTANCE_NAME }}"
          zone: "${{ secrets.DEPLOYMENT_ZONE }}"
          ssh_private_key: "${{ secrets.GCP_SSH_PRIVATE_KEY }}"
          command: |
            docker-credential-gcr configure-docker \
              --registries ${{ secrets.DOCKER_REGISTRY_DOMAIN }}
            docker pull \
              ${{ env.REPO }}/core_backend:latest
            docker stop core_backend
            docker rm core_backend
            docker run -d \
              --log-driver=gcplogs \
              --restart always \
              --network aaq-network \
              --name core_backend \
              ${{ env.REPO }}/core_backend:latest
            docker system prune -f
