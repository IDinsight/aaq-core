name: Deploy on push to main
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - AAQ-125-autodeploy-dev

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      # Add a setup buildx step
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github_actions_dev
          role-session-name: github-actions
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get git short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Docker tag and push core_backend image to ECR
        uses: docker/build-push-action@v3
        with:
          context: ./core_backend
          file: ./core_backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/core_backend:main
            ${{ steps.login-ecr.outputs.registry }}/core_backend:${{ steps.sha.outputs.sha_short }}

      # Perform another multi-platform build
      - name: Docker tag and push admin_app image to ECR
        uses: docker/build-push-action@v3
        with:
          context: ./admin_app
          file: ./admin_app/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/admin_app:main
            ${{ steps.login-ecr.outputs.registry }}/admin_app:${{ steps.sha.outputs.sha_short }}

      - name: Trigger webhook to redeploy container
        uses: distributhor/workflow-webhook@v3
        with:
          webhook_url: $(aws ec2 describe-addresses --filters Name=tag:Name,Values=aaq-dev --profile aaq --query 'Addresses[*].PublicIp' --output text)
          webhook_secret: $(aws secretsmanager get-secret-value --secret-id redeploy-webhook-secrets --profile aaq --query 'SecretString' --output text | python3 -c 'import json, sys; print(json.load(sys.stdin)["test_server_redeploy_webhook_secret"])')
